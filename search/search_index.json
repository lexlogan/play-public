{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"InnerAI-like Platform \u2014 MVP Documentation Pack","text":"<p>Data do pacote: 2025-08-13</p> <p>Este pacote cont\u00e9m documenta\u00e7\u00e3o funcional e t\u00e9cnica, especifica\u00e7\u00f5es de API, modelos de dados, diagrama\u00e7\u00e3o em Mermaid, exemplos de automa\u00e7\u00e3o e arquivos de suporte (Docker Compose, CI) para construir um MVP de uma plataforma agregadora de LLMs (semelhante ao InnerAI).</p>"},{"location":"#estrutura","title":"Estrutura","text":"<pre><code>innerai-mvp-docs/\n\u251c\u2500 00-product-vision/\n\u251c\u2500 01-functional-spec/\n\u251c\u2500 02-architecture/\n\u251c\u2500 03-backend/\n\u251c\u2500 04-ops/\n\u251c\u2500 05-ux/\n\u251c\u2500 06-samples/\n\u2514\u2500 LICENSE\n</code></pre>"},{"location":"#como-usar-rapidamente","title":"Como usar rapidamente","text":"<ol> <li>Leia <code>00-product-vision/vision.md</code> para alinhar objetivos de produto.</li> <li>Revise o MVP em <code>01-functional-spec/mvp-scope.md</code> e o backlog em <code>user-stories.md</code>.</li> <li>Confira <code>02-architecture/architecture-overview.md</code> e <code>openapi.yaml</code>.</li> <li>Rode o ambiente local com Docker:    <code>bash    cd 02-architecture    cp .env.example .env    docker compose up -d</code></li> <li>Use <code>06-samples/postman_collection.json</code> ou <code>06-samples/curl-examples.md</code> para testar endpoints stubados.</li> <li>Acompanhe <code>04-ops/ci-cd.md</code> e <code>observability.md</code> para pr\u00e1ticas de entrega e visibilidade.</li> </ol>"},{"location":"00-product-vision/personas/","title":"Personas","text":"<ul> <li>Plataform Engineer / SRE: quer governan\u00e7a de chaves, limites, auditoria, confiabilidade.</li> <li>Desenvolvedor Backend: quer uma API simples para usar LLMs com consist\u00eancia entre provedores.</li> <li>Gestor/FinOps: quer visibilidade de consumo por equipe/projeto e previsibilidade de custos.</li> </ul>"},{"location":"00-product-vision/value-prop/","title":"Proposta de Valor","text":"<ul> <li>Reduzir acoplamento da aplica\u00e7\u00e3o final a um \u00fanico provedor de LLM.</li> <li>Acelerar experimenta\u00e7\u00e3o (alternar modelos, comparar respostas, ajustar prompts).</li> <li>Aumentar controle e seguran\u00e7a: chaves centralizadas, RBAC, trilhas de auditoria.</li> <li>Melhorar visibilidade: m\u00e9tricas de taxa de sucesso, lat\u00eancia e consumo por projeto.</li> </ul>"},{"location":"00-product-vision/vision/","title":"Vis\u00e3o de Produto","text":"<p>Construir uma plataforma agregadora de IA (LLM Hub) que centraliza chaves, vers\u00f5es e pol\u00edticas de uso de provedores (OpenAI, Anthropic, Google, Azure OpenAI etc.), oferecendo um ponto \u00fanico de administra\u00e7\u00e3o, roteamento e auditoria. Foco inicial: desenvolvedores e equipes de plataforma que precisam padronizar acesso a LLMs com controle de custos, observabilidade e seguran\u00e7a.</p>"},{"location":"00-product-vision/vision/#objetivos-principais","title":"Objetivos principais","text":"<ul> <li>Unificar acesso a m\u00faltiplos LLMs via API pr\u00f3pria.</li> <li>Gerenciar segredos e credenciais por ambiente/projeto.</li> <li>Roteamento expl\u00edcito (modelo fixo) e fallback simples no MVP.</li> <li>Playground web para testar prompts e comparar respostas entre provedores.</li> <li>Observabilidade e custos: m\u00e9tricas b\u00e1sicas de uso por projeto/chave.</li> <li>Seguran\u00e7a: RBAC simples (Admin e User), escopos por projeto.</li> </ul>"},{"location":"00-product-vision/vision/#indicadores-de-sucesso-mvp","title":"Indicadores de sucesso (MVP)","text":"<ul> <li>Integra\u00e7\u00e3o com pelo menos 3 provedores.</li> <li>Lat\u00eancia p95 e taxa de erro por provedor vis\u00edveis no dashboard.</li> <li>Cria\u00e7\u00e3o e rota\u00e7\u00e3o de chaves do produto e chaves de provedores por projeto.</li> <li>80%+ das requisi\u00e7\u00f5es passando pelo proxy/roteador interno.</li> </ul>"},{"location":"01-functional-spec/functional-spec/","title":"Especifica\u00e7\u00e3o Funcional","text":""},{"location":"01-functional-spec/functional-spec/#escopo-do-mvp","title":"Escopo do MVP","text":"<ol> <li>Autentica\u00e7\u00e3o &amp; Autoriza\u00e7\u00e3o</li> <li>Cadastro de organiza\u00e7\u00e3o (tenant) e projetos.</li> <li>RBAC simples: <code>ADMIN</code>, <code>USER</code> no escopo do projeto.</li> <li> <p>Tokens de API por projeto (escopo: read/write/usage).</p> </li> <li> <p>Gest\u00e3o de Provedores</p> </li> <li>Registrar credenciais por provedor (OpenAI, Anthropic, Google/Vertex ou Gemini, Azure OpenAI).</li> <li>Marcar credenciais por ambiente (dev/stage/prod).</li> <li> <p>Teste de conectividade e quota b\u00e1sica.</p> </li> <li> <p>Roteamento de Requisi\u00e7\u00f5es</p> </li> <li>Modo expl\u00edcito: usu\u00e1rio escolhe <code>provider+model</code>.</li> <li>Fallback simples: ordem de prefer\u00eancia predefinida no projeto.</li> <li> <p>Limites por projeto (RPM/TPM) e circuit breaker b\u00e1sico por provedor.</p> </li> <li> <p>Playground</p> </li> <li>UI para criar prompts, escolher provedores e comparar respostas lado a lado.</li> <li> <p>Hist\u00f3rico local do projeto (\u00faltimos N prompts).</p> </li> <li> <p>Templates de Prompt</p> </li> <li>CRUD de prompts parametriz\u00e1veis (nome, tags, vers\u00e3o).</li> <li> <p>Renderiza\u00e7\u00e3o com vari\u00e1veis e pr\u00e9-visualiza\u00e7\u00e3o.</p> </li> <li> <p>Observabilidade &amp; Uso</p> </li> <li>Log de chamadas (projectId, provider, model, tokens in/out, status, lat\u00eancia).</li> <li>M\u00e9tricas agregadas por per\u00edodo.</li> <li> <p>Export CSV/NDJSON.</p> </li> <li> <p>Seguran\u00e7a</p> </li> <li>Storage de segredos seguro (MVP: KMS local + env/file; produ\u00e7\u00e3o: AWS KMS/Secrets Manager).</li> <li>Auditoria b\u00e1sica de opera\u00e7\u00f5es sens\u00edveis.</li> </ol>"},{"location":"01-functional-spec/functional-spec/#fora-do-mvp-roadmap","title":"Fora do MVP (Roadmap)","text":"<ul> <li>A/B routing, ranking autom\u00e1tico por qualidade/lat\u00eancia.</li> <li>Cache sem\u00e2ntico, embeddings e RAG nativo.</li> <li>Fine-tuning management.</li> <li>Multi-tenant SSO (SAML/OIDC), SCIM.</li> <li>Cotas e billing interno.</li> </ul>"},{"location":"01-functional-spec/mvp-scope/","title":"MVP \u2014 Ordem de Implementa\u00e7\u00e3o","text":"<p>1) Funda\u00e7\u00e3o    - Projeto Spring Boot base, autentica\u00e7\u00e3o por token de projeto.    - Postgres + Redis no Docker Compose.    - Estrutura de dom\u00ednios: Projects, ApiTokens, Providers, Models.</p> <p>2) Gest\u00e3o de Provedores    - Endpoints CRUD de credenciais.    - Teste de conectividade (health-check por provedor).</p> <p>3) Completions v1    - Endpoint unificado <code>/v1/completions</code> (text-only) com <code>provider+model</code> expl\u00edcitos.    - Fallback simples (ordem est\u00e1tica por projeto).    - Logging/metrics.</p> <p>4) Playground Web (b\u00e1sico)    - Tela \u00fanica com prompt, sele\u00e7\u00e3o de provedores e compara\u00e7\u00e3o.    - Hist\u00f3rico recente por projeto.</p> <p>5) Templates de Prompt    - CRUD + renderiza\u00e7\u00e3o com vari\u00e1veis.</p> <p>6) Observabilidade/Export    - Endpoint <code>/v1/usage/metrics</code> e <code>/v1/logs/export</code> (CSV).</p> <p>7) Pol\u00edticas simples    - Limites RPM/TPM e <code>circuit breaker</code> por provedor/projeto.</p> <p>Cada etapa deve finalizar com testes de contrato e smoke tests via CI.</p>"},{"location":"01-functional-spec/non-functional-requirements/","title":"Requisitos N\u00e3o Funcionais","text":"<ul> <li>Disponibilidade (MVP): 99,5% alvo.</li> <li>Lat\u00eancia: p95 &lt; 1.5s para completions simples (rede vari\u00e1vel).</li> <li>Seguran\u00e7a: segredos criptografados em repouso; TLS em tr\u00e2nsito.</li> <li>Observabilidade: logs estruturados, m\u00e9tricas (lat\u00eancia, erros, tokens).</li> <li>Escalabilidade: stateless app, horizontal scaling.</li> <li>Portabilidade: dev local via Docker Compose; prod em EKS.</li> </ul>"},{"location":"01-functional-spec/roadmap/","title":"Roadmap P\u00f3s-MVP (alto n\u00edvel)","text":"<ul> <li>Roteamento inteligente (lat\u00eancia/qualidade), A/B testing, ranking.</li> <li>Embeddings &amp; RAG: cole\u00e7\u00f5es, conectores (S3, GDrive), chunking e busca.</li> <li>Caching (hash do prompt+params), invalida\u00e7\u00e3o.</li> <li>SSO &amp; RBAC avan\u00e7ado; SCIM; controle de escopo fino.</li> <li>Custos e cotas: budget por projeto, alertas.</li> <li>Plugins/Tools: function calling padronizado.</li> </ul>"},{"location":"01-functional-spec/user-stories/","title":"User Stories (Backlog)","text":""},{"location":"01-functional-spec/user-stories/#autenticacao-projetos","title":"Autentica\u00e7\u00e3o &amp; Projetos","text":"<ul> <li>Como Admin, quero criar um projeto para separar chaves e uso por equipe.</li> <li>Como Admin, quero emitir e revogar tokens do projeto.</li> <li>Como User, quero autenticar com token para chamar a API do hub.</li> </ul>"},{"location":"01-functional-spec/user-stories/#provedores","title":"Provedores","text":"<ul> <li>Como Admin, quero cadastrar credenciais OpenAI para <code>dev</code> e <code>prod</code>.</li> <li>Como Admin, quero testar a conectividade do provedor.</li> <li>Como Admin, quero definir modelos aprovados por projeto.</li> </ul>"},{"location":"01-functional-spec/user-stories/#roteamento","title":"Roteamento","text":"<ul> <li>Como User, quero chamar <code>/v1/completions</code> escolhendo explicitamente <code>provider+model</code>.</li> <li>Como Admin, quero configurar uma lista de fallback.</li> <li>Como User, quero receber erro amig\u00e1vel quando todos provedores falharem, com <code>requestId</code>.</li> </ul>"},{"location":"01-functional-spec/user-stories/#playground-prompts","title":"Playground &amp; Prompts","text":"<ul> <li>Como User, quero testar um prompt e ver respostas lado a lado entre provedores.</li> <li>Como User, quero salvar um template e reutilizar com vari\u00e1veis.</li> <li>Como User, quero exportar o hist\u00f3rico (CSV).</li> </ul>"},{"location":"01-functional-spec/user-stories/#observabilidade","title":"Observabilidade","text":"<ul> <li>Como Admin, quero ver m\u00e9tricas de lat\u00eancia p95 por provedor.</li> <li>Como Admin, quero buscar logs por <code>requestId</code> para debug.</li> <li>Como FinOps, quero extrair consumo (tokens) por per\u00edodo.</li> </ul>"},{"location":"01-functional-spec/user-stories/#seguranca","title":"Seguran\u00e7a","text":"<ul> <li>Como Admin, quero revisar auditoria das altera\u00e7\u00f5es de credenciais.</li> <li>Como Admin, quero aplicar limites por projeto (RPM/TPM).</li> </ul>"},{"location":"02-architecture/architecture-overview/","title":"Arquitetura \u2014 Vis\u00e3o Geral","text":"<pre><code>flowchart LR\n  User[User/Client] --&gt; API[API Gateway/Ingress]\n  API --&gt; APP[InnerAI Backend (Spring Boot)]\n  APP --&gt;|Cache| Redis[(Redis)]\n  APP --&gt;|Metadados| Postgres[(Postgres)]\n  APP --&gt;|Objetos| MinIO[(S3/MinIO)]\n  APP --&gt;|M\u00e9tricas/Logs| OTel[OpenTelemetry]\n  APP --&gt;|Providers| Ext[OpenAI/Anthropic/Gemini/...]\n</code></pre> <ul> <li>Backend: Spring Boot 3, WebFlux (para IO-bound), Resilience4j (circuit breaker, retry, rate limit).</li> <li>Banco: Postgres para entidades de projeto, chaves, logs de alto n\u00edvel.</li> <li>Cache: Redis para throttling, locks, counters.</li> <li>Storage: MinIO (S3 compat\u00edvel) para exporta\u00e7\u00f5es/artefatos.</li> <li>Observabilidade: OpenTelemetry + Prometheus + Loki (dev).</li> </ul>"},{"location":"02-architecture/architecture-overview/#componentes-mvp","title":"Componentes (MVP)","text":"<ul> <li>Identity &amp; Projects: projetos, tokens, RBAC simples.</li> <li>Provider Manager: credenciais, modelos permitidos, teste de sa\u00fade.</li> <li>Router: sele\u00e7\u00e3o expl\u00edcita e fallback.</li> <li>Prompt Templates: CRUD + render.</li> <li>Usage &amp; Logs: agrega\u00e7\u00f5es e export.</li> </ul>"},{"location":"02-architecture/data-model/","title":"Modelo de Dados (ERD simplificado, Mermaid)","text":"<pre><code>erDiagram\n  PROJECT ||--o{ API_TOKEN : has\n  PROJECT ||--o{ PROVIDER_CREDENTIAL : manages\n  PROJECT ||--o{ PROMPT_TEMPLATE : owns\n  PROJECT ||--o{ USAGE_LOG : tracks\n\n  PROJECT {\n    uuid id PK\n    text name\n    text slug\n    timestamptz created_at\n  }\n\n  API_TOKEN {\n    uuid id PK\n    uuid project_id FK\n    text name\n    text hashed_token\n    text scopes\n    bool active\n    timestamptz created_at\n    timestamptz revoked_at\n  }\n\n  PROVIDER_CREDENTIAL {\n    uuid id PK\n    uuid project_id FK\n    text provider  // openai, anthropic, google, azure\n    text environment // dev, stage, prod\n    text key_ref // referencia segura\n    jsonb config // models permitidos, fallback order\n    bool active\n    timestamptz created_at\n  }\n\n  PROMPT_TEMPLATE {\n    uuid id PK\n    uuid project_id FK\n    text name\n    text version\n    text content\n    jsonb metadata\n    timestamptz created_at\n  }\n\n  USAGE_LOG {\n    uuid id PK\n    uuid project_id FK\n    text request_id\n    text provider\n    text model\n    int input_tokens\n    int output_tokens\n    int http_status\n    numeric latency_ms\n    jsonb error\n    timestamptz created_at\n  }\n</code></pre>"},{"location":"02-architecture/sequence-diagrams/","title":"Sequ\u00eancias (Mermaid)","text":""},{"location":"02-architecture/sequence-diagrams/#chamada-de-completion-com-fallback","title":"Chamada de Completion com Fallback","text":"<pre><code>sequenceDiagram\n  participant C as Client\n  participant A as InnerAI API\n  participant P1 as Provider A\n  participant P2 as Provider B\n\n  C-&gt;&gt;A: POST /v1/completions (provider=A, model=X)\n  A-&gt;&gt;A: Validar token, limites, pol\u00edticas\n  A-&gt;&gt;P1: Requisi\u00e7\u00e3o prompt\n  alt P1 falha\n    A-&gt;&gt;P2: Requisi\u00e7\u00e3o prompt (fallback)\n    P2--&gt;&gt;A: Resposta sucesso\n  else P1 sucesso\n    P1--&gt;&gt;A: Resposta sucesso\n  end\n  A-&gt;&gt;A: Logar m\u00e9tricas e auditoria\n  A--&gt;&gt;C: 200 + payload\n</code></pre>"},{"location":"02-architecture/adr/0001-use-spring-boot/","title":"ADR-0001 \u2014 Spring Boot e WebFlux","text":"<ul> <li>Decis\u00e3o: Usar Spring Boot 3 + WebFlux para IO-bound.</li> <li>Motiva\u00e7\u00e3o: Lat\u00eancia e escala para chamadas externas.</li> <li>Consequ\u00eancias: Programa\u00e7\u00e3o reativa; aten\u00e7\u00e3o a backpressure.</li> </ul>"},{"location":"02-architecture/adr/0002-use-postgres/","title":"ADR-0002 \u2014 Postgres como banco principal","text":"<ul> <li>Decis\u00e3o: Postgres para dados relacionais e relat\u00f3rios b\u00e1sicos.</li> <li>Motiva\u00e7\u00e3o: Confi\u00e1vel, suporte a JSONB, ecosistema maduro.</li> <li>Alternativas: MySQL; Document DB; DynamoDB (futuro).</li> </ul>"},{"location":"02-architecture/adr/0003-secret-management/","title":"ADR-0003 \u2014 Gest\u00e3o de Segredos","text":"<ul> <li>Decis\u00e3o: MVP com <code>.env</code>; Produ\u00e7\u00e3o com AWS Secrets Manager + KMS.</li> <li>Motiva\u00e7\u00e3o: Simplicidade e seguran\u00e7a evolutiva.</li> </ul>"},{"location":"02-architecture/adr/0004-api-design/","title":"ADR-0004 \u2014 Design de API Unificada","text":"<ul> <li>Decis\u00e3o: Endpoints unificados (ex.: <code>/v1/completions</code>) e cabe\u00e7alhos de projeto.</li> <li>Motiva\u00e7\u00e3o: Facilidade de integra\u00e7\u00e3o, padroniza\u00e7\u00e3o cross-providers.</li> </ul>"},{"location":"03-backend/module-structure/","title":"Estrutura sugerida (Mono-repo, m\u00f3dulo \u00fanico no MVP)","text":"<pre><code>backend/\n  src/main/java/com/innerai/\n    api/        # controllers (webflux)\n    app/        # casos de uso, services\n    domain/     # entidades e portas\n    infra/      # adapters: db, redis, http clients, security\n  src/main/resources/\n    application.yaml\n</code></pre> <ul> <li>WebFlux para IO-bound (chamadas externas).</li> <li>Resilience4j para retry/circuit breaker/ratelimit.</li> <li>MapStruct para mapeamentos.</li> <li>Spring Security para bearer tokens.</li> </ul>"},{"location":"03-backend/settings/bootstrap-http-clients/","title":"HTTP Clients (WebClient)","text":"<ul> <li>Configure <code>WebClient</code> por provedor com <code>baseUrl</code>, <code>defaultHeaders</code> din\u00e2micos (por projeto).</li> <li><code>ExchangeFilterFunction</code> para <code>requestId</code>, <code>timing</code> e logs estruturados.</li> <li>Use <code>Resilience4j</code> decorators: <code>Retry</code>, <code>CircuitBreaker</code>, <code>RateLimiter</code> por provedor/projeto.</li> </ul>"},{"location":"04-ops/ci-cd/","title":"CI/CD (GitHub Actions \u2013 exemplo)","text":"<ul> <li>Pipeline executa: linters, testes, build imagem Docker e publica em registry interno.</li> <li>Gate simples: testes passando e qualidade m\u00ednima.</li> </ul> <p>Veja <code>github/workflows/ci.yml</code> para um pipeline inicial.</p>"},{"location":"04-ops/dev-setup/","title":"Ambiente de Desenvolvimento (Docker)","text":"<ol> <li>Crie <code>.env</code> a partir de <code>.env.example</code>.</li> <li>Suba os servi\u00e7os:    <code>bash    docker compose up -d</code></li> <li>Acesse:</li> <li>Postgres: <code>localhost:5432</code> (innerai/innerai)</li> <li>Redis: <code>localhost:6379</code></li> <li>MinIO: <code>http://localhost:9001</code> (console; admin/adminadmin)</li> <li>Crie o bucket <code>${MINIO_BUCKET}</code> caso n\u00e3o seja criado automaticamente.</li> </ol>"},{"location":"04-ops/observability/","title":"Observabilidade (MVP)","text":"<ul> <li>Tracing: OpenTelemetry SDK no Spring Boot \u2192 OTLP (Collector). </li> <li>M\u00e9tricas: Micrometer \u2192 Prometheus (ou Collector \u2192 logging no dev).</li> <li>Logs: JSON estruturado; correla\u00e7\u00e3o por <code>requestId</code>.</li> </ul> <p>KPIs b\u00e1sicos: - Lat\u00eancia p50/p95 por provedor e por rota. - Taxa de erro (HTTP 5xx/4xx). - Tokens in/out por projeto.</p>"},{"location":"04-ops/release-checklist/","title":"Checklist de Release (MVP)","text":"<ul> <li>[ ] Migra\u00e7\u00f5es DB aplicadas.</li> <li>[ ] Vari\u00e1veis de ambiente checadas.</li> <li>[ ] Chaves de provedores configuradas e testadas.</li> <li>[ ] Limites por projeto definidos.</li> <li>[ ] Observabilidade ativa (traces, m\u00e9tricas, logs).</li> <li>[ ] Backups de banco e configura\u00e7\u00e3o de reten\u00e7\u00e3o.</li> </ul>"},{"location":"04-ops/security/","title":"Seguran\u00e7a","text":"<ul> <li>Segredos: no MVP, <code>.env</code> local e <code>key_ref</code> armazenando refer\u00eancia; em produ\u00e7\u00e3o, AWS Secrets Manager/KMS.</li> <li>Tokens de projeto: formato Bearer, hash no banco (BCrypt/Argon2).</li> <li>RBAC: Admin/User por projeto.</li> <li>Auditoria: mudan\u00e7as de credenciais, emiss\u00e3o/revoga\u00e7\u00e3o de tokens, exporta\u00e7\u00f5es.</li> <li>Rate limiting e circuit breaker por provedor/projeto.</li> </ul>"},{"location":"04-ops/testing-strategy/","title":"Estrat\u00e9gia de Testes","text":"<ul> <li>Unit\u00e1rios: servi\u00e7os, templates, roteamento.</li> <li>Contratos: WireMock para provedores.</li> <li>Integra\u00e7\u00e3o: Testcontainers (Postgres/Redis).</li> <li>E2E: smoke tests do <code>/v1/completions</code> com provedores mock.</li> <li>Performance: Gatling/k6 para p95 e throughput.</li> </ul>"},{"location":"05-ux/api-playground/","title":"Playground \u2014 Requisitos de UX (MVP)","text":"<ul> <li>Campo de prompt (multilinha) e sele\u00e7\u00e3o m\u00faltipla de provedores/modelos permitidos.</li> <li>Bot\u00e3o \"Comparar\" \u2192 exibe respostas lado a lado, tempos e contagens de tokens.</li> <li>Hist\u00f3rico recente no painel lateral (salvo por projeto).</li> <li>Exportar sess\u00e3o (JSON/CSV).</li> </ul>"},{"location":"05-ux/wireframes/","title":"Wireframes (descri\u00e7\u00e3o)","text":"<ol> <li>Home/Project Dashboard: m\u00e9tricas b\u00e1sicas (lat\u00eancia, erros, tokens) e atalhos.</li> <li>Playground: editor, seletores, painel de resultados tabulado.</li> <li>Providers: listagem de credenciais, status de sa\u00fade, teste de conex\u00e3o.</li> <li>Prompts: lista com busca, vers\u00f5es e bot\u00e3o \"render test\".</li> </ol>"},{"location":"06-samples/curl-examples/","title":"cURL \u2014 Exemplos","text":"<pre><code># Listar projetos\ncurl -H \"Authorization: Bearer &lt;ADMIN_JWT&gt;\" http://localhost:8080/v1/projects\n\n# Completion expl\u00edcito\ncurl -X POST http://localhost:8080/v1/completions   -H \"Authorization: Bearer &lt;PROJECT_TOKEN&gt;\"   -H \"Content-Type: application/json\"   -d '{\n    \"projectId\": \"00000000-0000-0000-0000-000000000000\",\n    \"provider\": \"openai\",\n    \"model\": \"gpt-4o-mini\",\n    \"prompt\": \"Escreva um haicai sobre servidores Kubernetes.\"\n  }'\n</code></pre>"},{"location":"06-samples/java-client-example/","title":"Exemplo Java (WebClient)","text":"<pre><code>WebClient client = WebClient.builder()\n    .baseUrl(\"http://localhost:8080\")\n    .defaultHeader(HttpHeaders.AUTHORIZATION, \"Bearer \" + projectToken)\n    .build();\n\nMono&lt;String&gt; res = client.post()\n    .uri(\"/v1/completions\")\n    .contentType(MediaType.APPLICATION_JSON)\n    .bodyValue(Map.of(\n        \"projectId\", projectId.toString(),\n        \"provider\", \"openai\",\n        \"model\", \"gpt-4o-mini\",\n        \"prompt\", \"Hello from Java\"\n    ))\n    .retrieve()\n    .bodyToMono(String.class);\n</code></pre>"}]}